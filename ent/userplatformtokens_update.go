// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shitamachi/push-service/ent/predicate"
	"github.com/shitamachi/push-service/ent/userplatformtokens"
)

// UserPlatformTokensUpdate is the builder for updating UserPlatformTokens entities.
type UserPlatformTokensUpdate struct {
	config
	hooks    []Hook
	mutation *UserPlatformTokensMutation
}

// Where adds a new predicate for the UserPlatformTokensUpdate builder.
func (uptu *UserPlatformTokensUpdate) Where(ps ...predicate.UserPlatformTokens) *UserPlatformTokensUpdate {
	uptu.mutation.predicates = append(uptu.mutation.predicates, ps...)
	return uptu
}

// SetType sets the "type" field.
func (uptu *UserPlatformTokensUpdate) SetType(u uint8) *UserPlatformTokensUpdate {
	uptu.mutation.ResetType()
	uptu.mutation.SetType(u)
	return uptu
}

// AddType adds u to the "type" field.
func (uptu *UserPlatformTokensUpdate) AddType(u uint8) *UserPlatformTokensUpdate {
	uptu.mutation.AddType(u)
	return uptu
}

// SetUserID sets the "user_id" field.
func (uptu *UserPlatformTokensUpdate) SetUserID(s string) *UserPlatformTokensUpdate {
	uptu.mutation.SetUserID(s)
	return uptu
}

// SetDeviceID sets the "device_id" field.
func (uptu *UserPlatformTokensUpdate) SetDeviceID(s string) *UserPlatformTokensUpdate {
	uptu.mutation.SetDeviceID(s)
	return uptu
}

// SetToken sets the "token" field.
func (uptu *UserPlatformTokensUpdate) SetToken(s string) *UserPlatformTokensUpdate {
	uptu.mutation.SetToken(s)
	return uptu
}

// SetAppID sets the "app_id" field.
func (uptu *UserPlatformTokensUpdate) SetAppID(s string) *UserPlatformTokensUpdate {
	uptu.mutation.SetAppID(s)
	return uptu
}

// SetCreatedAt sets the "created_at" field.
func (uptu *UserPlatformTokensUpdate) SetCreatedAt(t time.Time) *UserPlatformTokensUpdate {
	uptu.mutation.SetCreatedAt(t)
	return uptu
}

// SetUpdatedAt sets the "updated_at" field.
func (uptu *UserPlatformTokensUpdate) SetUpdatedAt(t time.Time) *UserPlatformTokensUpdate {
	uptu.mutation.SetUpdatedAt(t)
	return uptu
}

// Mutation returns the UserPlatformTokensMutation object of the builder.
func (uptu *UserPlatformTokensUpdate) Mutation() *UserPlatformTokensMutation {
	return uptu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uptu *UserPlatformTokensUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uptu.hooks) == 0 {
		affected, err = uptu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserPlatformTokensMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uptu.mutation = mutation
			affected, err = uptu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uptu.hooks) - 1; i >= 0; i-- {
			mut = uptu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uptu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uptu *UserPlatformTokensUpdate) SaveX(ctx context.Context) int {
	affected, err := uptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uptu *UserPlatformTokensUpdate) Exec(ctx context.Context) error {
	_, err := uptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uptu *UserPlatformTokensUpdate) ExecX(ctx context.Context) {
	if err := uptu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uptu *UserPlatformTokensUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userplatformtokens.Table,
			Columns: userplatformtokens.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userplatformtokens.FieldID,
			},
		},
	}
	if ps := uptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uptu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: userplatformtokens.FieldType,
		})
	}
	if value, ok := uptu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: userplatformtokens.FieldType,
		})
	}
	if value, ok := uptu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userplatformtokens.FieldUserID,
		})
	}
	if value, ok := uptu.mutation.DeviceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userplatformtokens.FieldDeviceID,
		})
	}
	if value, ok := uptu.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userplatformtokens.FieldToken,
		})
	}
	if value, ok := uptu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userplatformtokens.FieldAppID,
		})
	}
	if value, ok := uptu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userplatformtokens.FieldCreatedAt,
		})
	}
	if value, ok := uptu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userplatformtokens.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userplatformtokens.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserPlatformTokensUpdateOne is the builder for updating a single UserPlatformTokens entity.
type UserPlatformTokensUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPlatformTokensMutation
}

// SetType sets the "type" field.
func (uptuo *UserPlatformTokensUpdateOne) SetType(u uint8) *UserPlatformTokensUpdateOne {
	uptuo.mutation.ResetType()
	uptuo.mutation.SetType(u)
	return uptuo
}

// AddType adds u to the "type" field.
func (uptuo *UserPlatformTokensUpdateOne) AddType(u uint8) *UserPlatformTokensUpdateOne {
	uptuo.mutation.AddType(u)
	return uptuo
}

// SetUserID sets the "user_id" field.
func (uptuo *UserPlatformTokensUpdateOne) SetUserID(s string) *UserPlatformTokensUpdateOne {
	uptuo.mutation.SetUserID(s)
	return uptuo
}

// SetDeviceID sets the "device_id" field.
func (uptuo *UserPlatformTokensUpdateOne) SetDeviceID(s string) *UserPlatformTokensUpdateOne {
	uptuo.mutation.SetDeviceID(s)
	return uptuo
}

// SetToken sets the "token" field.
func (uptuo *UserPlatformTokensUpdateOne) SetToken(s string) *UserPlatformTokensUpdateOne {
	uptuo.mutation.SetToken(s)
	return uptuo
}

// SetAppID sets the "app_id" field.
func (uptuo *UserPlatformTokensUpdateOne) SetAppID(s string) *UserPlatformTokensUpdateOne {
	uptuo.mutation.SetAppID(s)
	return uptuo
}

// SetCreatedAt sets the "created_at" field.
func (uptuo *UserPlatformTokensUpdateOne) SetCreatedAt(t time.Time) *UserPlatformTokensUpdateOne {
	uptuo.mutation.SetCreatedAt(t)
	return uptuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uptuo *UserPlatformTokensUpdateOne) SetUpdatedAt(t time.Time) *UserPlatformTokensUpdateOne {
	uptuo.mutation.SetUpdatedAt(t)
	return uptuo
}

// Mutation returns the UserPlatformTokensMutation object of the builder.
func (uptuo *UserPlatformTokensUpdateOne) Mutation() *UserPlatformTokensMutation {
	return uptuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uptuo *UserPlatformTokensUpdateOne) Select(field string, fields ...string) *UserPlatformTokensUpdateOne {
	uptuo.fields = append([]string{field}, fields...)
	return uptuo
}

// Save executes the query and returns the updated UserPlatformTokens entity.
func (uptuo *UserPlatformTokensUpdateOne) Save(ctx context.Context) (*UserPlatformTokens, error) {
	var (
		err  error
		node *UserPlatformTokens
	)
	if len(uptuo.hooks) == 0 {
		node, err = uptuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserPlatformTokensMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uptuo.mutation = mutation
			node, err = uptuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uptuo.hooks) - 1; i >= 0; i-- {
			mut = uptuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uptuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uptuo *UserPlatformTokensUpdateOne) SaveX(ctx context.Context) *UserPlatformTokens {
	node, err := uptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uptuo *UserPlatformTokensUpdateOne) Exec(ctx context.Context) error {
	_, err := uptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uptuo *UserPlatformTokensUpdateOne) ExecX(ctx context.Context) {
	if err := uptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uptuo *UserPlatformTokensUpdateOne) sqlSave(ctx context.Context) (_node *UserPlatformTokens, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userplatformtokens.Table,
			Columns: userplatformtokens.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userplatformtokens.FieldID,
			},
		},
	}
	id, ok := uptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserPlatformTokens.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userplatformtokens.FieldID)
		for _, f := range fields {
			if !userplatformtokens.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userplatformtokens.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uptuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: userplatformtokens.FieldType,
		})
	}
	if value, ok := uptuo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: userplatformtokens.FieldType,
		})
	}
	if value, ok := uptuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userplatformtokens.FieldUserID,
		})
	}
	if value, ok := uptuo.mutation.DeviceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userplatformtokens.FieldDeviceID,
		})
	}
	if value, ok := uptuo.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userplatformtokens.FieldToken,
		})
	}
	if value, ok := uptuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userplatformtokens.FieldAppID,
		})
	}
	if value, ok := uptuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userplatformtokens.FieldCreatedAt,
		})
	}
	if value, ok := uptuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userplatformtokens.FieldUpdatedAt,
		})
	}
	_node = &UserPlatformTokens{config: uptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userplatformtokens.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
