// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shitamachi/push-service/ent/predicate"
	"github.com/shitamachi/push-service/ent/userpushtoken"
)

// UserPushTokenUpdate is the builder for updating UserPushToken entities.
type UserPushTokenUpdate struct {
	config
	hooks    []Hook
	mutation *UserPushTokenMutation
}

// Where adds a new predicate for the UserPushTokenUpdate builder.
func (uptu *UserPushTokenUpdate) Where(ps ...predicate.UserPushToken) *UserPushTokenUpdate {
	uptu.mutation.predicates = append(uptu.mutation.predicates, ps...)
	return uptu
}

// SetUserID sets the "user_id" field.
func (uptu *UserPushTokenUpdate) SetUserID(s string) *UserPushTokenUpdate {
	uptu.mutation.SetUserID(s)
	return uptu
}

// SetToken sets the "token" field.
func (uptu *UserPushTokenUpdate) SetToken(s string) *UserPushTokenUpdate {
	uptu.mutation.SetToken(s)
	return uptu
}

// SetAppID sets the "app_id" field.
func (uptu *UserPushTokenUpdate) SetAppID(s string) *UserPushTokenUpdate {
	uptu.mutation.SetAppID(s)
	return uptu
}

// SetCreatedAt sets the "created_at" field.
func (uptu *UserPushTokenUpdate) SetCreatedAt(t time.Time) *UserPushTokenUpdate {
	uptu.mutation.SetCreatedAt(t)
	return uptu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uptu *UserPushTokenUpdate) SetNillableCreatedAt(t *time.Time) *UserPushTokenUpdate {
	if t != nil {
		uptu.SetCreatedAt(*t)
	}
	return uptu
}

// SetUpdatedAt sets the "updated_at" field.
func (uptu *UserPushTokenUpdate) SetUpdatedAt(t time.Time) *UserPushTokenUpdate {
	uptu.mutation.SetUpdatedAt(t)
	return uptu
}

// Mutation returns the UserPushTokenMutation object of the builder.
func (uptu *UserPushTokenUpdate) Mutation() *UserPushTokenMutation {
	return uptu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uptu *UserPushTokenUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	uptu.defaults()
	if len(uptu.hooks) == 0 {
		affected, err = uptu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserPushTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uptu.mutation = mutation
			affected, err = uptu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uptu.hooks) - 1; i >= 0; i-- {
			mut = uptu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uptu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uptu *UserPushTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := uptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uptu *UserPushTokenUpdate) Exec(ctx context.Context) error {
	_, err := uptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uptu *UserPushTokenUpdate) ExecX(ctx context.Context) {
	if err := uptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uptu *UserPushTokenUpdate) defaults() {
	if _, ok := uptu.mutation.UpdatedAt(); !ok {
		v := userpushtoken.UpdateDefaultUpdatedAt()
		uptu.mutation.SetUpdatedAt(v)
	}
}

func (uptu *UserPushTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userpushtoken.Table,
			Columns: userpushtoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userpushtoken.FieldID,
			},
		},
	}
	if ps := uptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uptu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpushtoken.FieldUserID,
		})
	}
	if value, ok := uptu.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpushtoken.FieldToken,
		})
	}
	if value, ok := uptu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpushtoken.FieldAppID,
		})
	}
	if value, ok := uptu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userpushtoken.FieldCreatedAt,
		})
	}
	if value, ok := uptu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userpushtoken.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpushtoken.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserPushTokenUpdateOne is the builder for updating a single UserPushToken entity.
type UserPushTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPushTokenMutation
}

// SetUserID sets the "user_id" field.
func (uptuo *UserPushTokenUpdateOne) SetUserID(s string) *UserPushTokenUpdateOne {
	uptuo.mutation.SetUserID(s)
	return uptuo
}

// SetToken sets the "token" field.
func (uptuo *UserPushTokenUpdateOne) SetToken(s string) *UserPushTokenUpdateOne {
	uptuo.mutation.SetToken(s)
	return uptuo
}

// SetAppID sets the "app_id" field.
func (uptuo *UserPushTokenUpdateOne) SetAppID(s string) *UserPushTokenUpdateOne {
	uptuo.mutation.SetAppID(s)
	return uptuo
}

// SetCreatedAt sets the "created_at" field.
func (uptuo *UserPushTokenUpdateOne) SetCreatedAt(t time.Time) *UserPushTokenUpdateOne {
	uptuo.mutation.SetCreatedAt(t)
	return uptuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uptuo *UserPushTokenUpdateOne) SetNillableCreatedAt(t *time.Time) *UserPushTokenUpdateOne {
	if t != nil {
		uptuo.SetCreatedAt(*t)
	}
	return uptuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uptuo *UserPushTokenUpdateOne) SetUpdatedAt(t time.Time) *UserPushTokenUpdateOne {
	uptuo.mutation.SetUpdatedAt(t)
	return uptuo
}

// Mutation returns the UserPushTokenMutation object of the builder.
func (uptuo *UserPushTokenUpdateOne) Mutation() *UserPushTokenMutation {
	return uptuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uptuo *UserPushTokenUpdateOne) Select(field string, fields ...string) *UserPushTokenUpdateOne {
	uptuo.fields = append([]string{field}, fields...)
	return uptuo
}

// Save executes the query and returns the updated UserPushToken entity.
func (uptuo *UserPushTokenUpdateOne) Save(ctx context.Context) (*UserPushToken, error) {
	var (
		err  error
		node *UserPushToken
	)
	uptuo.defaults()
	if len(uptuo.hooks) == 0 {
		node, err = uptuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserPushTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uptuo.mutation = mutation
			node, err = uptuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uptuo.hooks) - 1; i >= 0; i-- {
			mut = uptuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uptuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uptuo *UserPushTokenUpdateOne) SaveX(ctx context.Context) *UserPushToken {
	node, err := uptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uptuo *UserPushTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := uptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uptuo *UserPushTokenUpdateOne) ExecX(ctx context.Context) {
	if err := uptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uptuo *UserPushTokenUpdateOne) defaults() {
	if _, ok := uptuo.mutation.UpdatedAt(); !ok {
		v := userpushtoken.UpdateDefaultUpdatedAt()
		uptuo.mutation.SetUpdatedAt(v)
	}
}

func (uptuo *UserPushTokenUpdateOne) sqlSave(ctx context.Context) (_node *UserPushToken, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userpushtoken.Table,
			Columns: userpushtoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userpushtoken.FieldID,
			},
		},
	}
	id, ok := uptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserPushToken.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpushtoken.FieldID)
		for _, f := range fields {
			if !userpushtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userpushtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uptuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpushtoken.FieldUserID,
		})
	}
	if value, ok := uptuo.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpushtoken.FieldToken,
		})
	}
	if value, ok := uptuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpushtoken.FieldAppID,
		})
	}
	if value, ok := uptuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userpushtoken.FieldCreatedAt,
		})
	}
	if value, ok := uptuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userpushtoken.FieldUpdatedAt,
		})
	}
	_node = &UserPushToken{config: uptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpushtoken.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
