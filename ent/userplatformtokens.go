// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shitamachi/push-service/ent/userplatformtokens"
)

// UserPlatformTokens is the model entity for the UserPlatformTokens schema.
type UserPlatformTokens struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type uint8 `json:"type,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// DeviceID holds the value of the "device_id" field.
	DeviceID string `json:"device_id,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPlatformTokens) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userplatformtokens.FieldID, userplatformtokens.FieldType:
			values[i] = new(sql.NullInt64)
		case userplatformtokens.FieldUserID, userplatformtokens.FieldDeviceID, userplatformtokens.FieldToken, userplatformtokens.FieldAppID:
			values[i] = new(sql.NullString)
		case userplatformtokens.FieldCreatedAt, userplatformtokens.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserPlatformTokens", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPlatformTokens fields.
func (upt *UserPlatformTokens) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userplatformtokens.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			upt.ID = int(value.Int64)
		case userplatformtokens.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				upt.Type = uint8(value.Int64)
			}
		case userplatformtokens.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				upt.UserID = value.String
			}
		case userplatformtokens.FieldDeviceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				upt.DeviceID = value.String
			}
		case userplatformtokens.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				upt.Token = value.String
			}
		case userplatformtokens.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				upt.AppID = value.String
			}
		case userplatformtokens.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				upt.CreatedAt = value.Time
			}
		case userplatformtokens.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				upt.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserPlatformTokens.
// Note that you need to call UserPlatformTokens.Unwrap() before calling this method if this UserPlatformTokens
// was returned from a transaction, and the transaction was committed or rolled back.
func (upt *UserPlatformTokens) Update() *UserPlatformTokensUpdateOne {
	return (&UserPlatformTokensClient{config: upt.config}).UpdateOne(upt)
}

// Unwrap unwraps the UserPlatformTokens entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (upt *UserPlatformTokens) Unwrap() *UserPlatformTokens {
	tx, ok := upt.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserPlatformTokens is not a transactional entity")
	}
	upt.config.driver = tx.drv
	return upt
}

// String implements the fmt.Stringer.
func (upt *UserPlatformTokens) String() string {
	var builder strings.Builder
	builder.WriteString("UserPlatformTokens(")
	builder.WriteString(fmt.Sprintf("id=%v", upt.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", upt.Type))
	builder.WriteString(", user_id=")
	builder.WriteString(upt.UserID)
	builder.WriteString(", device_id=")
	builder.WriteString(upt.DeviceID)
	builder.WriteString(", token=")
	builder.WriteString(upt.Token)
	builder.WriteString(", app_id=")
	builder.WriteString(upt.AppID)
	builder.WriteString(", created_at=")
	builder.WriteString(upt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(upt.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserPlatformTokensSlice is a parsable slice of UserPlatformTokens.
type UserPlatformTokensSlice []*UserPlatformTokens

func (upt UserPlatformTokensSlice) config(cfg config) {
	for _i := range upt {
		upt[_i].config = cfg
	}
}
