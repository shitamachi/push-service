// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shitamachi/push-service/ent/userpushtoken"
)

// UserPushTokenCreate is the builder for creating a UserPushToken entity.
type UserPushTokenCreate struct {
	config
	mutation *UserPushTokenMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (uptc *UserPushTokenCreate) SetUserID(s string) *UserPushTokenCreate {
	uptc.mutation.SetUserID(s)
	return uptc
}

// SetToken sets the "token" field.
func (uptc *UserPushTokenCreate) SetToken(s string) *UserPushTokenCreate {
	uptc.mutation.SetToken(s)
	return uptc
}

// SetAppID sets the "app_id" field.
func (uptc *UserPushTokenCreate) SetAppID(s string) *UserPushTokenCreate {
	uptc.mutation.SetAppID(s)
	return uptc
}

// SetCreatedAt sets the "created_at" field.
func (uptc *UserPushTokenCreate) SetCreatedAt(t time.Time) *UserPushTokenCreate {
	uptc.mutation.SetCreatedAt(t)
	return uptc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uptc *UserPushTokenCreate) SetNillableCreatedAt(t *time.Time) *UserPushTokenCreate {
	if t != nil {
		uptc.SetCreatedAt(*t)
	}
	return uptc
}

// SetUpdatedAt sets the "updated_at" field.
func (uptc *UserPushTokenCreate) SetUpdatedAt(t time.Time) *UserPushTokenCreate {
	uptc.mutation.SetUpdatedAt(t)
	return uptc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uptc *UserPushTokenCreate) SetNillableUpdatedAt(t *time.Time) *UserPushTokenCreate {
	if t != nil {
		uptc.SetUpdatedAt(*t)
	}
	return uptc
}

// Mutation returns the UserPushTokenMutation object of the builder.
func (uptc *UserPushTokenCreate) Mutation() *UserPushTokenMutation {
	return uptc.mutation
}

// Save creates the UserPushToken in the database.
func (uptc *UserPushTokenCreate) Save(ctx context.Context) (*UserPushToken, error) {
	var (
		err  error
		node *UserPushToken
	)
	uptc.defaults()
	if len(uptc.hooks) == 0 {
		if err = uptc.check(); err != nil {
			return nil, err
		}
		node, err = uptc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserPushTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uptc.check(); err != nil {
				return nil, err
			}
			uptc.mutation = mutation
			node, err = uptc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uptc.hooks) - 1; i >= 0; i-- {
			mut = uptc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uptc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uptc *UserPushTokenCreate) SaveX(ctx context.Context) *UserPushToken {
	v, err := uptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (uptc *UserPushTokenCreate) defaults() {
	if _, ok := uptc.mutation.CreatedAt(); !ok {
		v := userpushtoken.DefaultCreatedAt()
		uptc.mutation.SetCreatedAt(v)
	}
	if _, ok := uptc.mutation.UpdatedAt(); !ok {
		v := userpushtoken.DefaultUpdatedAt()
		uptc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uptc *UserPushTokenCreate) check() error {
	if _, ok := uptc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New("ent: missing required field \"user_id\"")}
	}
	if _, ok := uptc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New("ent: missing required field \"token\"")}
	}
	if _, ok := uptc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New("ent: missing required field \"app_id\"")}
	}
	if _, ok := uptc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := uptc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	return nil
}

func (uptc *UserPushTokenCreate) sqlSave(ctx context.Context) (*UserPushToken, error) {
	_node, _spec := uptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uptc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (uptc *UserPushTokenCreate) createSpec() (*UserPushToken, *sqlgraph.CreateSpec) {
	var (
		_node = &UserPushToken{config: uptc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userpushtoken.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userpushtoken.FieldID,
			},
		}
	)
	if value, ok := uptc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpushtoken.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := uptc.mutation.Token(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpushtoken.FieldToken,
		})
		_node.Token = value
	}
	if value, ok := uptc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpushtoken.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := uptc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userpushtoken.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := uptc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userpushtoken.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// UserPushTokenCreateBulk is the builder for creating many UserPushToken entities in bulk.
type UserPushTokenCreateBulk struct {
	config
	builders []*UserPushTokenCreate
}

// Save creates the UserPushToken entities in the database.
func (uptcb *UserPushTokenCreateBulk) Save(ctx context.Context) ([]*UserPushToken, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uptcb.builders))
	nodes := make([]*UserPushToken, len(uptcb.builders))
	mutators := make([]Mutator, len(uptcb.builders))
	for i := range uptcb.builders {
		func(i int, root context.Context) {
			builder := uptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserPushTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uptcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uptcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uptcb *UserPushTokenCreateBulk) SaveX(ctx context.Context) []*UserPushToken {
	v, err := uptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
